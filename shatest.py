#!/usr/bin/env python3
import sha1
import binascii
from sha1 import Sha1Hash
testkey = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f]
msg = [0x4e, 0x6f, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x68, 0x61, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
       0x65, 0x74, 0x65, 0x64, 0x20, 0x6c, 0x61, 0x62, 0x20, 0x32, 0x20, 0x73, 0x6f, 0x20, 0x67, 0x69,
       0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x61, 0x20, 0x30]

print("Alice:")
print()
print(bytes(msg))
print(Sha1Hash().update(bytes(testkey + msg)).hexdigest())

print()
print()
print("Bob:")
print()
extension = [0x2c, 0x20, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x20, 0x5a, 0x61, 0x63, 0x6b, 0x2e, 0x20, 0x48, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x63, 0x6f, 0x6f, 0x6c, 0x20, 0x64, 0x75, 0x64, 0x65, 0x2e]
pad = [0x80]
for i in range(56):
    pad += [0x00]

#ext = bytes(extension, 'utf-8')
mod_msg = msg + pad + [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8] + extension

print(binascii.hexlify(bytes(mod_msg)))
print(Sha1Hash().update(bytes(testkey + mod_msg)).hexdigest())
print()




print()
print()
print("Mallory:")
print()

test_mac = [0x91216ef0,
            0x0d38c421,
            0xfe0dfb9c,
            0x2d511347,
            0x6b78cd88]
test_mac = [0xf4b645e8,
       0x9faaec2f,
       0xf8e443c5,
       0x95009c16,
       0xdbdfba4b]

ext = [0x2c, 0x20, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x20, 0x5a, 0x61, 0x63, 0x6b, 0x2e, 0x20, 0x48, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x63, 0x6f, 0x6f, 0x6c, 0x20, 0x64, 0x75, 0x64, 0x65, 0x2e]
chunk = ext
chunk += [0x80]
for i in range(20 + 6):
    chunk += [0x00]
newlen = 1024 + (len(ext) * 8)
chunk += [0x05]
chunk += [0x18]
chunk = bytes(chunk)
print(chunk)
test_mac[0], test_mac[1], test_mac[2], test_mac[3], test_mac[4] = sha1._process_chunk(chunk, test_mac[0], test_mac[1], test_mac[2], test_mac[3], test_mac[4])
for row in test_mac:
    print(hex(row))
